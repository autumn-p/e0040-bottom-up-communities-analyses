# group em by taxa
community_taxa_long <- datae0040meta %>%
group_by(communityType) %>%
summarise(across(all_of(taxonomic_levels), ~ sum(as.numeric(.x), na.rm = TRUE), .names = "{.col}_sum"))
# I need to fix this table and stackoverflow mentioned pivot_longer?
community_taxa_long <- tidyr::pivot_longer(community_taxa_long,
cols = -communityType,
names_to = "TaxonomicLevel",
values_to = "RelativeAbundance")
# Create the stacked bar plot
plot <- ggplot(data = community_taxa_long, aes(x = communityType, y = RelativeAbundance, fill = TaxonomicLevel)) +
geom_bar(stat = "identity") +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Composition of Taxonomic Levels in Different Communities") +
theme(legend.position = "right") +
scale_fill_brewer(palette = "Set3")
plot
warnings()
# group em by taxa
community_taxa_long <- datae0040meta %>%
group_by(communityType) %>%
summarise(across(all_of(taxonomic_levels), ~ sum(as.numeric(.x[!is.na(.x)]), na.rm = TRUE), .names = "{.col}_sum"))
# I need to fix this table and stackoverflow mentioned pivot_longer?
community_taxa_long <- tidyr::pivot_longer(community_taxa_long,
cols = -communityType,
names_to = "TaxonomicLevel",
values_to = "RelativeAbundance")
# Create the stacked bar plot
plot <- ggplot(data = community_taxa_long, aes(x = communityType, y = RelativeAbundance, fill = TaxonomicLevel)) +
geom_bar(stat = "identity") +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Composition of Taxonomic Levels in Different Communities") +
theme(legend.position = "right") +
scale_fill_brewer(palette = "Set3")
plot
warnings()
# Convert taxonomic levels to character if they are not already
datae0040meta[taxonomic_levels] <- lapply(datae0040meta[taxonomic_levels], as.character)
# Create stacked bar plot
community_taxa_long <- datae0040meta %>%
group_by(communityType) %>%
summarize(across(all_of(taxonomic_levels), ~ sum(as.numeric(as.character(.x)), na.rm = TRUE), .names = "{.col}_sum"))
# Stacked bar plots to visualize the relative abundance of different taxonomic levels within each comm
# List of taxa
taxonomic_levels <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus")
# Convert taxonomic levels to character if they are not already
datae0040meta[taxonomic_levels] <- lapply(datae0040meta[taxonomic_levels], as.character)
# Create stacked bar plot
community_taxa_long <- datae0040meta %>%
group_by(communityType) %>%
summarize(across(all_of(taxonomic_levels), ~ sum(as.numeric(as.character(.x)), na.rm = TRUE), .names = "{.col}_sum"))
# Reshape the data
community_taxa_long <- tidyr::pivot_longer(community_taxa_long,
cols = -communityType,
names_to = "TaxonomicLevel",
values_to = "RelativeAbundance")
# Create the stacked bar plot
plot <- ggplot(data = community_taxa_long, aes(x = communityType, y = RelativeAbundance, fill = TaxonomicLevel)) +
geom_bar(stat = "identity") +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Composition of Taxonomic Levels in Different Communities") +
theme(legend.position = "right") +
scale_fill_brewer(palette = "Set3")
plot
warnings()
write.table(datae0040meta, "datae0040meta.txt", row.names = FALSE, quote = FALSE)
# Ensure taxonomic_levels is character vector
taxonomic_levels <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus")
# Convert taxonomic levels to character if they are not already
datae0040meta[taxonomic_levels] <- lapply(datae0040meta[taxonomic_levels], as.character)
# Create stacked bar plot
community_taxa_long <- datae0040meta %>%
group_by(communityType) %>%
summarize(across(all_of(taxonomic_levels), ~ sum(as.numeric(as.character(.x)), na.rm = TRUE), .names = "{.col}_sum"))
warnings()
# Ensure taxonomic_levels is character vector
taxonomic_levels <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus")
# Convert taxonomic levels to character if they are not already
datae0040meta[taxonomic_levels] <- lapply(datae0040meta[taxonomic_levels], as.character)
# Calculate relative abundance for each taxonomic level within each community
community_taxa <- datae0040meta %>%
group_by(communityType) %>%
summarise(across(all_of(taxonomic_levels), ~ sum(relAbundance, na.rm = TRUE)))
# Reshape the data
community_taxa_long <- tidyr::pivot_longer(community_taxa,
cols = -communityType,
names_to = "TaxonomicLevel",
values_to = "RelativeAbundance")
# Create the stacked bar plot
plot <- ggplot(data = community_taxa_long, aes(x = communityType, y = RelativeAbundance, fill = TaxonomicLevel)) +
geom_bar(stat = "identity") +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Composition of Taxonomic Levels in Different Communities") +
theme(legend.position = "right") +
scale_fill_brewer(palette = "Set3")
plot
# Create the stacked bar plot
community_taxa_bars <- ggplot(data = community_taxa_long, aes(x = communityType, y = RelativeAbundance, fill = TaxonomicLevel)) +
geom_bar(stat = "identity") +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Composition of Taxonomic Levels in Different Communities") +
theme(legend.position = "right") +
scale_fill_brewer(palette = "Set3")
# Save plot
save_plot("community_taxa_bars.png", community_tax_bars)
# Save plot
save_plot("community_taxa_bars.png", community_taxa_bars)
# boxplots to compare the distribution of relative abundance values among different community types
# Subset the data by community type
preAbx_data <- datae0040meta[datae0040meta$communityType == "preAbx", ]
postAbx_data <- datae0040meta[datae0040meta$communityType == "postAbx", ]
# Create a boxplot using ggplot2
plot <- ggplot() +
geom_boxplot(data = preAbx_data, aes(x = communityType, y = relAbundance), fill = "steelblue", color = "black") +
geom_boxplot(data = postAbx_data, aes(x = communityType, y = relAbundance), fill = "lightgray", color = "black") +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Distribution of Relative Abundance by Community Type") +
theme_bw()
plot
# Save plot
save_plot("relAbundance_boxPlot.png", relAbundance_boxPlot)
# Create a boxplot
relAbundance_boxPlot <- ggplot() +
geom_boxplot(data = preAbx_data, aes(x = communityType, y = relAbundance), fill = "steelblue", color = "black") +
geom_boxplot(data = postAbx_data, aes(x = communityType, y = relAbundance), fill = "lightgray", color = "black") +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Distribution of Relative Abundance by Community Type") +
theme_bw()
# Save plot
save_plot("relAbundance_boxPlot.png", relAbundance_boxPlot)
# boxplots to compare the distribution of relative abundance values among different community types
# Combine the data frames for preAbx and postAbx
combined_prePost_data <- rbind(preAbx_data, postAbx_data)
# Create a boxplot using ggplot2
relAbundance_boxPlot <- ggplot(combined_prepost_data, aes(x = communityType, y = relAbundance, fill = communityType)) +
geom_boxplot() +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Distribution of Relative Abundance by Community Type") +
theme_bw() +
scale_fill_manual(values = c("steelblue", "lightgray"))
# Create a boxplot using ggplot2
relAbundance_boxPlot <- ggplot(combined_prePost_data, aes(x = communityType, y = relAbundance, fill = communityType)) +
geom_boxplot() +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Distribution of Relative Abundance by Community Type") +
theme_bw() +
scale_fill_manual(values = c("steelblue", "lightgray"))
relAbundance_boxPlot
# boxplots to compare the distribution of relative abundance values among different community types
# Create and combine the data frames for preAbx and postAbx
# Subset the data by community type
preAbx_data <- datae0040meta[datae0040meta$communityType == "preAbx", ]
postAbx_data <- datae0040meta[datae0040meta$communityType == "postAbx", ]
combined_prePost_data <- rbind(preAbx_data, postAbx_data)
# Create a boxplot using ggplot2
relAbundance_boxPlot <- ggplot(combined_prePost_data, aes(x = communityType, y = relAbundance, fill = communityType)) +
geom_boxplot() +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Distribution of Relative Abundance by Community Type") +
theme_bw() +
scale_fill_manual(values = c("steelblue", "lightgray"))
relAbundance_boxPlot
View(postAbx_data)
View(preAbx_data)
# boxplots to compare the distribution of relative abundance values among different community types
# Create andombine the data frames for preAbx and postAbx
# Subset the data by community type
preAbx_data <- datae0040meta[datae0040meta$communityType == "preAbx", ]
postAbxV1_data <- datae0040meta[datae0040meta$communityType == "postAbxV1", ]
postAbxV2_data <- datae0040meta[datae0040meta$communityType == "postAbxV2", ]
combined_prePost_data <- rbind(preAbx_data, postAbxV1_data, postAbxV2_data)
# Create a boxplot using ggplot2
relAbundance_boxPlot <- ggplot(combined_prePost_data, aes(x = communityType, y = relAbundance, fill = communityType)) +
geom_boxplot() +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Distribution of Relative Abundance by Community Type") +
theme_bw() +
scale_fill_manual(values = c("steelblue", "lightgray"))
relAbundance_boxPlot
# boxplots to compare the distribution of relative abundance values among different community types
# Create andombine the data frames for preAbx and postAbx
# Subset the data by community type
preAbx_data <- datae0040meta[datae0040meta$communityType == "preAbx", ]
postAbxV1_data <- datae0040meta[datae0040meta$communityType == "postAbxV1", ]
postAbxV2_data <- datae0040meta[datae0040meta$communityType == "postAbxV2", ]
# Create a boxplot using ggplot2
relAbundance_boxPlot <- ggplot() +
geom_boxplot(data = preAbx_data, aes(x = communityType, y = relAbundance), fill = "steelblue", color = "black") +
geom_boxplot(data = postAbxV1_data, aes(x = communityType, y = relAbundance), fill = "steelblue", color = "black") +
geom_boxplot(data = postAbxV2_data, aes(x = communityType, y = relAbundance), fill = "steelblue", color = "black") +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Distribution of Relative Abundance by Community Type") +
theme_bw()
relAbundance_boxPlot
# Save plot
save_plot("relAbundance_boxPlot.png", relAbundance_boxPlot)
View(alpha_diversity_media)
# Plot the alpha diversity of microbial communities against the different media types used
# Create a scatter plot using ggplot2
alphaDiversity_media_scatter <- ggplot(alpha_diversity_media, aes(x = media, y = alpha_diversity_e0040)) +
geom_point() +
xlab("Media") +
ylab("Alpha Diveristy") +
ggtitle("Relative Abundance vs. Media") +
theme_bw()
alphaDiversity_media_scatter
# Save plot
save_plot("alphaDiversity_media_scatter.png", alphaDiversity_media_scatter)
# bar plot comparing the alpha diversity for each replicate group
# Create a grouped bar plot using ggplot2
replicateReliability_bars <- ggplot(datae0040meta, aes(x = replicate, y = alpha_diversity_e0040, fill = replicate)) +
geom_bar(stat = "identity", position = "dodge") +
xlab("Replicate") +
ylab("Alpha Diversity") +
ggtitle("Replicate Reliability") +
theme_bw()
replicateReliability_bars
# Bar plot comparing the alpha diversity for each replicate group
# Create a subset of the data for the replicate groups
replicate_groups <- list(
preAbx = c("A1", "B1", "C1", "D1"),
postAbxV1 = c("A2", "B2", "C2", "D2"),
postAbxV2 = c("A3", "B3", "C3", "D3"),
mGAM = c("E1", "F1", "G1", "H1"),
RCM = c("E2", "F2", "G2", "H2"),
YCFA = c("E3", "F3", "G3", "H3"),
bacteOnly = c("E4", "F4", "G4", "H4")
)
# Create a new data frame containing the replicate groups only
replicate_data <- datae0040meta[datae0040meta$well %in% unlist(replicate_groups), ]
# Create a boxplot for each replicate group
replicateReliability_boxplot <- ggplot(replicate_data, aes(x = well, y = relAbundance, fill = well)) +
geom_boxplot() +
xlab("Replicate Group") +
ylab("Relative Abundance") +
ggtitle("Comparison of Replicate Groups") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
replicateReliability_boxplot
# Create a new factor variable for the well column based on the replicate groups
replicate_order <- unlist(replicate_groups)
replicate_data$well <- factor(replicate_data$well, levels = replicate_order)
# Create a custom color palette for the replicate groups
group_colors <- c("preAbx" = "steelblue",
"postAbxV1" = "darkorange",
"postAbxV2" = "darkgreen",
"mGAM" = "purple",
"RCM" = "deeppink",
"YCFA" = "gold",
"bacteOnly" = "darkcyan")
# Create a boxplot for each replicate group with customized color palette
replicateReliability_boxplot <- ggplot(replicate_data, aes(x = well, y = relAbundance, fill = well)) +
geom_boxplot() +
scale_fill_manual(values = group_colors) +
xlab("Replicate Group") +
ylab("Relative Abundance") +
ggtitle("Comparison of Replicate Groups") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
replicateReliability_boxplot
# Save plot
save_plot("replicateReliability_boxplot.png", replicateReliability_boxplot)
# Create a new factor variable for the well column based on the replicate groups
replicate_order <- unlist(replicate_groups)
replicate_data$well <- factor(replicate_data$well, levels = replicate_order)
# Create a custom color palette for the replicate groups
group_colors <- c("preAbx" = "steelblue",
"postAbxV1" = "darkorange",
"postAbxV2" = "darkgreen",
"mGAM" = "purple",
"RCM" = "deeppink",
"YCFA" = "gold",
"bacteOnly" = "darkcyan")
# Create a boxplot for each replicate group with customized color palette
replicateReliability_boxplot <- ggplot(replicate_data, aes(x = well, y = relAbundance, fill = well)) +
geom_boxplot() +
scale_fill_manual(values = group_colors, guide = FALSE) +
xlab("Replicate Group") +
ylab("Relative Abundance") +
ggtitle("Comparison of Replicate Groups") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
replicateReliability_boxplot
# Rotate x-axis labels if needed
replicateReliability_boxplot + scale_x_discrete(labels = names(replicate_groups)) +
guides(fill = guide_legend(title = "Replicate Group", override.aes = list(fill = group_colors)))
# Create a new data frame containing the replicate groups only
replicate_data <- datae0040meta[datae0040meta$well %in% unlist(replicate_groups), ]
# Create a boxplot for each replicate group
replicateReliability_boxplot <- ggplot(replicate_data, aes(x = well, y = relAbundance, fill = well)) +
geom_boxplot() +
xlab("Replicate Group") +
ylab("Relative Abundance") +
ggtitle("Comparison of Replicate Groups") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a new factor variable for the well column based on the replicate groups
replicate_order <- unlist(replicate_groups)
replicate_data$well <- factor(replicate_data$well, levels = replicate_order)
# Create a custom color palette for the replicate groups
group_colors <- c("preAbx" = "steelblue",
"postAbxV1" = "darkorange",
"postAbxV2" = "darkgreen",
"mGAM" = "purple",
"RCM" = "deeppink",
"YCFA" = "gold",
"bacteOnly" = "darkcyan")
# Create a boxplot for each replicate group with customized color palette
replicateReliability_boxplot <- ggplot(replicate_data, aes(x = well, y = relAbundance, fill = well)) +
geom_boxplot() +
scale_fill_manual(values = group_colors) +
xlab("Replicate Group") +
ylab("Relative Abundance") +
ggtitle("Comparison of Replicate Groups") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
replicateReliability_boxplot
# Save plot
save_plot("replicateReliability_boxplot.png", replicateReliability_boxplot)
# Post-Abx V1 and save table
alpha_diversity_postAbxV1 <- dec_alpha_diversity %>%
filter(communityType == "postAbxV1") %>%
distinct(well, .keep_all = TRUE) %>%
dplyr::select(well, relAbundance, alpha_diversity_e0040, communityType, media)
write.table(alpha_diversity_preAbx, file = "alpha_diversity_postAbxV1.txt", quote = FALSE, row.names = FALSE)
# Top 20 most abundant species
# and calculate the cumulative sum of the relative abundance represented by the species.
# pre-antibiotic
output_preAbx_specTop = datae0040meta %>% filter(communityType=="preAbx") %>%
top_n(20, relAbundance) %>% arrange(desc(relAbundance)) %>%
dplyr::select(count, communityType, relAbundance, media, Family) %>%
mutate(cumulative_abundance=cumsum(relAbundance))
write.table(output_preAbx_specTop, "e0040A_preAbx_asv20.txt", row.names = FALSE, quote = FALSE)
#post-antibiotic V1
output_postAbxV1_specTop = datae0040meta %>% filter(communityType=="postAbxV1") %>%
top_n(20, relAbundance) %>% arrange(desc(relAbundance)) %>%
dplyr::select(count, communityType, relAbundance, media, Family) %>%
mutate(cumulative_abundance=cumsum(relAbundance))
write.table(output_postAbxV1_specTop, "e0040A_postAbxV1_asv20.txt", row.names = FALSE, quote = FALSE)
# post-antibiotic V2
output_postAbxV2_specTop = datae0040meta %>% filter(communityType=="postAbxV2") %>%
top_n(20, relAbundance) %>% arrange(desc(relAbundance)) %>%
dplyr::select(count, communityType, relAbundance, media, Family) %>%
mutate(cumulative_abundance=cumsum(relAbundance))
write.table(output_postAbxV2_specTop, "e0040A_postAbxV2_asv20.txt", row.names = FALSE, quote = FALSE)
View(output_postAbxV1_specTop)
View(output_postAbxV2_specTop)
View(output_preAbx_specTop)
library(VennDiagram)
install.packages("VennDiagram")
library(VennDiagram)
# Extract microbial families for each community type
preAbx_families <- unique(datae0040meta[datae0040meta$communityType == "preAbx", "Family"])
postAbxV1_families <- unique(datae0040meta[datae0040meta$communityType == "postAbxV1", "Family"])
postAbxV2_families <- unique(datae0040meta[datae0040meta$communityType == "postAbxV2", "Family"])
# Prepare the input for the Venn diagram
taxa_venn_input <- list(
preAbx = preAbx_families,
postAbxV1 = postAbxV1_families,
postAbxV2 = postAbxV2_families
)
# Create the Venn diagram
taxa_venn_plot <- venn.diagram(
x = taxa_venn_input,
category.names = c("Pre-Abx", "Post-Abx V1", "Post-Abx V2"),
fill = c("steelblue", "darkorange", "darkgreen"),
alpha = 0.7,
cex = 1.5,
filename = NULL
)
# Extract microbial families for each community type
preAbx_families <- unique(datae0040meta[datae0040meta$communityType == "preAbx", "Family"])
postAbxV1_families <- unique(datae0040meta[datae0040meta$communityType == "postAbxV1", "Family"])
postAbxV2_families <- unique(datae0040meta[datae0040meta$communityType == "postAbxV2", "Family"])
# Prepare the input for the Venn diagram, removing NAs
venn_input <- list(
preAbx = preAbx_families[!is.na(preAbx_families)],
postAbxV1 = postAbxV1_families[!is.na(postAbxV1_families)],
postAbxV2 = postAbxV2_families[!is.na(postAbxV2_families)]
)
# Create the Venn diagram
venn_plot <- venn.diagram(
x = venn_input,
category.names = c("Pre-Abx", "Post-Abx V1", "Post-Abx V2"),
fill = c("steelblue", "darkorange", "darkgreen"),
alpha = 0.7,
cex = 1.5,
filename = NULL
)
# Display the Venn diagram
grid.draw(venn_plot)
venn_plot
display(venn_plot)
grid.draw(venn_plot)
# Save plot
save_plot("taxa_venn_plot.png", taxa_venn_plot)
# Prepare the input for the Venn diagram, removing NAs
taxa_venn_input <- list(
preAbx = preAbx_families[!is.na(preAbx_families)],
postAbxV1 = postAbxV1_families[!is.na(postAbxV1_families)],
postAbxV2 = postAbxV2_families[!is.na(postAbxV2_families)]
)
# Create the Venn diagram
taxa_venn_plot <- venn.diagram(
x = taxa_venn_input,
category.names = c("Pre-Abx", "Post-Abx V1", "Post-Abx V2"),
fill = c("steelblue", "darkorange", "darkgreen"),
alpha = 0.7,
cex = 1.5,
filename = NULL
)
# Display the Venn diagram
grid.draw(taxa_venn_plot)
# Save plot
save_plot("taxa_venn_plot.png", taxa_venn_plot)
# Add a title to the Venn diagram
title <- "Shared Families"
venn_plot <- grid.arrange(
grobs = list(taxa_venn_plot, textGrob(title, gp = gpar(fontsize = 16, fontface = "bold"))),
nrow = 2,
heights = c(0.8, 0.2)
)
# Display the Venn diagram
grid.draw(taxa_venn_plot)
# Save plot
save_plot("taxa_venn_plot.png", taxa_venn_plot)
# Add a title to the Venn diagram
title <- "Shared Families"
venn_plot <- grid.arrange(
grobs = list(taxa_venn_plot, textGrob(title, gp = gpar(fontsize = 16, fontface = "bold"))),
nrow = 2,
heights = c(0.8, 0.2)
)
taxa_venn_plot <- grid.arrange(
grobs = list(taxa_venn_plot, textGrob(title, gp = gpar(fontsize = 16, fontface = "bold"))),
nrow = 2,
heights = c(0.8, 0.2)
)
# Display the Venn diagram
grid.draw(taxa_venn_plot)
# Save plot
save_plot("taxa_venn_plot.png", taxa_venn_plot)
View(datae0040meta)
View(taxa_venn_input)
# I could make a bar plot showing the count or relative abundance of each community type
# Summary of rel abundance by comm
community_abundance <- aggregate(relAbundance ~ communityType, data = datae0040meta, FUN = sum)
# Create a bar plot using ggplot2
community_abundance_bars <- ggplot(data = community_abundance) +
geom_bar(aes(x=well, y=relAbundance, fill=factor(family))) +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Distribution of Community Types based on Relative Abundance")
# Save plot
save_plot("community_abundance_bars.png", community_abundance_bars)
View(datae0040meta)
# Create a bar plot using ggplot2
community_abundance_bars <- ggplot(data = datae0040meta) +
geom_bar(aes(x=well, y=relAbundance, fill=factor(family))) +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Distribution of Community Types based on Relative Abundance")
community_abundance_bars
ggplot(datae0040meta) +
geom_bar(aes(x=well, y=relAbundance, fill=factor(family))) +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Distribution of Community Types based on Relative Abundance")
datae0040meta %>% ggplot() +
geom_bar(aes(x=well, y=relAbundance, fill=factor(family))) +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Distribution of Community Types based on Relative Abundance")
View(datae0040meta)
# Create a bar plot using ggplot2
datae0040meta %>% ggplot() +
geom_bar(aes(x=well, y=relAbundance, fill=factor(Family))) +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Distribution of Community Types based on Relative Abundance")
# Create a bar plot using ggplot2
datae0040meta %>% ggplot() +
geom_bar(aes(x=well, y=relAbundance, fill=factor(Family)), stat= "identity") +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Distribution of Community Types based on Relative Abundance")
# Create a bar plot using ggplot2
community_abundance_bar_v2 <- datae0040meta %>% ggplot() +
geom_bar(aes(x=well, y=relAbundance, fill=factor(Family)), stat= "identity") +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Distribution of Community Types based on Relative Abundance")
# Create a bar plot using ggplot2
community_abundance_bar_v2 <- datae0040meta %>% ggplot() +
geom_bar(aes(x=well, y=relAbundance, fill=factor(Family)), stat= "identity") +
xlab("Community Type") +
ylab("Relative Abundance") +
ggtitle("Distribution of Community Types based on Relative Abundance")
# Save plot
save_plot("community_abundance_bar_v2.png", community_abundance_bar_v2)
